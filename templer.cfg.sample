##
##  This is the sample configuration file for a Templer-generated
## website.
##
##  Templer is documented on the following github repository:
##
##    https://github.com/skx/templer/
##
##



##
#
# If you wish to execute commands prior to building the
# site you may include an arbitrary number of keys called
# pre-build.
#
# pre-build = echo Starting build at $(date)
# pre-build = echo Running on $(hostname)
#
##




##
#
# The first section of the configuration file refers to the
# input and output paths.
#
# Templer will process all files matching "*.skx" beneath a
# particular directory.  That directory is the input directory.
#
input = ./input/
#
##




##
#
# Within the input directory we'll process files that match
# a given suffix.
#
# By default this is ".skx", so we'll template-expand files
# named "index.skx", "about.skx", etc.
#
# suffix = .skx
#
##


##
#
# By default all pages will be written in HTML.
#
# If you have the appropriate depedencies installed you can instead
# write your input pages in textile/markdown.  Just add to the page
#
#    Title: my title
#    Format: textile
#    ----
#    ... your content here ..
#
# If all pages are going to be setup in one format you may prefer
# to change this default
#
format = html
# format = markdown
# format = perl
# format = textile
#
##
#


##
#
# If we're working in-place then files will be expanded where
# they are found.
#
# This means that the following files will be created:
#
#   ./input/index.skx       -> input/index.html
#   ./input/foo/index.skx   -> input/foo/index.html
#   ..
#
#
# in-place = 1
#
##


##
#
# If we're working synchronized then files in output must have a source file
# in input or else they are removed
#
# sync = 1
#
##


##
#
# The more common way of working is to produce the output in a separate
# directory.
#
# NOTE:  If you specify both "in-place=1" and an output directory the former
#        will take precedence.
#
#
output = ./output/
#
##




##
#
# When pages are processed a layout-template will be used to expand the content
# into.
#
# Each page may specify its own layout (and template-filter) if it so wishes,
# but generally we'd expect only one layout to exist.
#
# Here we specify both the path to the layout directory and the layout to use
# if none is specified:
#
#
# layout-path = ./layouts/
#
# layout      = default.layout
#
# Layout template can be filtered in order to escape HTML::Template rigid
# syntax which is annoying with some text-editor
#
# template-filter = dollar, strict
#
##




##
#
# Templer supports plugins for expanding variable definitions
# inside the input files, or for formating with text systems
# like Textile, Markdown, etc.
#
# There are several plugins included with the system and you
# can write your own in perl.  Specify the path to load plugins
# from here.
#
plugin-path = ./plugins/
#
##


##
#
# Templer supports including files via the 'read_file' function, along
# with the built-in support that HTML::Template has for file inclusion
# via:
#
#   <!-- tmpl_include name='file.inc' -->
#
# In both cases you may specify a search-path for file inclusion
# via the include-path setting:
#
# include-path = include/:include/local/
#
# Given the choice you should prefer the templer-provided file-inclusion
# method over the HTML::Template facility, because this will force pages to
# be rebuilt when the included-files are changed.
#
# Using a HTML::Template include-file you'll need to explicitly force a
# rebuild if you modify an included file, but not the parent.
#
#
include-path = ./includes
#
##



##
#
# If you wish to execute commands after building the
# site you may include an arbitrary number of keys called
# post-build.
#
# post-build = echo Finished build at $(date)
#
##



#
#  Anything below this is a global variable, accessible by name in your
# templates.
#
#  For example this:
#
#    copyright = Steve Kemp `date +%Y`
#
#  Means you can use this in your layout, or your page text:
#
#    <!-- tmpl_var name='copyright' -->
#
#
#  Notice that commands, surrounded in backticks (`) are executed and
# their output is substituted inline in the way you might expect.
# In this case we have the current year inserted into the copyright
# string every time the site is rebuilt.
#
#

